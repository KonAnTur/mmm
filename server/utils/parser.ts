import { apifyService } from '~/server/services/apify'
import { prisma } from '~/server/utils/prisma'

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞–Ω–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 */
function chunked<T>(array: T[], size: number): T[][] {
  const chunks: T[][] = []
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size))
  }
  return chunks
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—ã (–∞–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏)
 */
function convertDurationToSeconds(durationStr: string): number {
  if (!durationStr) return 0
  
  try {
    // –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å "MM:SS" –∏–ª–∏ "HH:MM:SS"
    const parts = durationStr.split(':').map(Number)
    
    if (parts.length === 2) {
      // MM:SS
      return parts[0] * 60 + parts[1]
    } else if (parts.length === 3) {
      // HH:MM:SS
      return parts[0] * 3600 + parts[1] * 60 + parts[2]
    }
    
    return 0
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "${durationStr}":`, error)
    return 0
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ YouTube Shorts (‚â§60 —Å–µ–∫—É–Ω–¥)
 */
function isYouTubeShorts(video: any): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ URL (—Å–æ–¥–µ—Ä–∂–∏—Ç /shorts/)
  if (video.url && video.url.includes('/shorts/')) {
    return true
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (video.duration) {
    const durationSec = convertDurationToSeconds(video.duration)
    return durationSec > 0 && durationSec <= 60
  }
  
  return false
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –¢–û–õ–¨–ö–û YouTube Shorts –≤–∏–¥–µ–æ
 */
function prioritizeYouTubeShorts(videos: YoutubeVideoData[]): YoutubeVideoData[] {
  // –¢–û–õ–¨–ö–û Shorts - –∏—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ
  const shorts: YoutubeVideoData[] = []
  
  videos.forEach(video => {
    if (isYouTubeShorts(video)) {
      shorts.push(video)
    }
  })
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º Shorts –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
  shorts.sort((a, b) => (b.viewCount || 0) - (a.viewCount || 0))
  
  console.log(`üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${shorts.length} –¢–û–õ–¨–ö–û Shorts –∏–∑ ${videos.length} –≤–∏–¥–µ–æ`)
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 150 Shorts –º–∞–∫—Å–∏–º—É–º
  const result = shorts.slice(0, 150)
  
  console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–±–æ—Ä: ${result.length} –¢–û–õ–¨–ö–û Shorts`)
  
  return result
}

/**
 * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (–∞–Ω–∞–ª–æ–≥ Python unquote)
 */
function decodeUrlString(str: string): string {
  if (!str) return str
  
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    return decodeURIComponent(str)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å—Ç—Ä–æ–∫–∏ "${str}":`, error)
    return str
  }
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è Instagram –∏–∑ Apify
 */
interface InstagramProfileData {
  username?: string
  fullName?: string
  biography?: string
  followersCount?: number
  followsCount?: number
  profilePicUrl?: string
  isPrivate?: boolean
  isVerified?: boolean
  postsCount?: number
  [key: string]: any
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞ Instagram –∏–∑ Apify
 */
interface InstagramPostData {
  id: string
  username?: string
  ownerUsername?: string
  caption?: string
  type?: string
  url?: string
  timestamp?: number | string
  likesCount?: number
  videoPlayCount?: number
  commentsCount?: number
  videoDuration?: number
  duration?: string
  [key: string]: any
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ YouTube –∫–∞–Ω–∞–ª–∞ –∏–∑ Apify
 */
interface YoutubeChannelData {
  channelUsername?: string
  channelName?: string
  channelUrl?: string
  channelId?: string
  numberOfSubscribers?: number
  channelTotalVideos?: number
  channelTotalViews?: number
  isChannelVerified?: boolean
  channelDescription?: string
  channelAvatarUrl?: string
  [key: string]: any
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ YouTube –≤–∏–¥–µ–æ –∏–∑ Apify
 */
interface YoutubeVideoData {
  id: string
  title?: string
  url?: string
  viewCount?: number
  likes?: number
  commentsCount?: number
  date?: string
  duration?: string
  channelUsername?: string
  channelName?: string
  channelId?: string
  text?: string
  [key: string]: any
}

export class ParserService {
  private static readonly BATCH_SIZE = 20
  private static readonly POSTS_LIMIT = 500

  /**
   * –ü–∞—Ä—Å–∏—Ç Instagram –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ Apify –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
   * –ê–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏ parse_instagram_profiles
   */
  static async parseInstagramProfiles(
    profileUrls: string[], 
    isPublic: boolean = true
  ): Promise<void> {
    if (profileUrls.length === 0) {
      console.log('üîç –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
      return
    }

    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${profileUrls.length} Instagram –ø—Ä–æ—Ñ–∏–ª–µ–π (public: ${isPublic})`)
    console.log(`üìã –ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:`, profileUrls)

    try {
      // 1. –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
      const allProfileItems: InstagramProfileData[] = []
      const chunks = chunked(profileUrls, this.BATCH_SIZE)

      console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${this.BATCH_SIZE} –ø—Ä–æ—Ñ–∏–ª–µ–π`)

      for (const chunk of chunks) {
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ –∏–∑ ${chunk.length} –ø—Ä–æ—Ñ–∏–ª–µ–π:`, chunk)
        
        try {
          // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
          for (const profileUrl of chunk) {
            try {
              console.log(`üîç –ü–∞—Ä—Å—é –ø—Ä–æ—Ñ–∏–ª—å: ${profileUrl}`)
              const profileData = await apifyService.parseInstagramProfile(profileUrl)
              allProfileItems.push(profileData as InstagramProfileData)
              console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${profileData.username} (${profileData.followersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)`)
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ—Ñ–∏–ª—è ${profileUrl}:`, error)
              continue
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞–Ω–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:`, error)
          continue
        }
      }

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${allProfileItems.length} –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ë–î`)
      await this.upsertProfiles(allProfileItems, isPublic)

      // 3. –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ, –ø–∞—Ä—Å–∏–º –∏—Ö –ø–æ—Å—Ç—ã
      if (isPublic && allProfileItems.length > 0) {
        console.log(`üì∏ –ü—Ä–æ—Ñ–∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ (${isPublic}) –∏ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã (${allProfileItems.length}), –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤`)
        await this.parseProfilePosts(profileUrls)
      } else {
        if (!isPublic) {
          console.log(`üîí –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤`)
        } else {
          console.log(`‚ö†Ô∏è –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤`)
        }
      }

      console.log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ—Ñ–∏–ª–µ–π:`, error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ ApifyService
   */
  private static async parseProfilePosts(profileUrls: string[]): Promise<void> {
    console.log(`üì∏ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${profileUrls.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`)
    const allPosts: InstagramPostData[] = []
    const chunks = chunked(profileUrls, this.BATCH_SIZE)

    console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤`)

    for (const chunk of chunks) {
      console.log(`üì∏ –ü–∞—Ä—Å—é –ø–æ—Å—Ç—ã –¥–ª—è ${chunk.length} –ø—Ä–æ—Ñ–∏–ª–µ–π:`, chunk)
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ ApifyService –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π
        console.log(`üöÄ –í—ã–∑—ã–≤–∞—é apifyService.parseInstagramProfilePosts —Å –ª–∏–º–∏—Ç–æ–º ${this.POSTS_LIMIT}`)
        const posts = await apifyService.parseInstagramProfilePosts(chunk, this.POSTS_LIMIT)
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –∏–∑ Apify`)
        
        if (posts.length > 0) {
          console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:`)
          posts.slice(0, 3).forEach((post: any, index: number) => {
            console.log(`  ${index + 1}. ID: ${post.id}, type: ${post.type}, username: ${post.username || post.ownerUsername}`)
          })
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
        const videoPosts = posts.filter((post: any) => post.type === 'Video')
        allPosts.push(...(videoPosts as InstagramPostData[]))
        
        console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${videoPosts.length} –≤–∏–¥–µ–æ-–ø–æ—Å—Ç–æ–≤ –∏–∑ ${posts.length} –ø–æ—Å—Ç–æ–≤`)

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —á–∞–Ω–∫–∞:`, error)
        continue
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –ë–î
    if (allPosts.length > 0) {
      console.log(`üíæ –ù–∞–π–¥–µ–Ω–æ ${allPosts.length} –≤–∏–¥–µ–æ-–ø–æ—Å—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î`)
      await this.upsertPosts(allPosts, 'profiles')
    } else {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ-–ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`)
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î (–∞–Ω–∞–ª–æ–≥ Python upsert_profiles)
   */
  private static async upsertProfiles(
    items: InstagramProfileData[], 
    isPublic: boolean
  ): Promise<void> {
    const chunks = chunked(items, 100)
    
    for (const chunk of chunks) {
      const profileData = chunk.map(profile => ({
        platform: 'instagram',
        username: profile.username || '',
        displayName: profile.fullName || null,
        profilePic: profile.profilePicUrl || null,
        profileBio: profile.biography || null,
        followers: profile.followersCount || 0,
        following: profile.followsCount || 0,
        latestVideo: null,
        comments: 0,
        public: isPublic,
        updatedAt: new Date()
      }))

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Prisma –¥–ª—è batch upsert
      for (const profile of profileData) {
        try {
          await prisma.profiles.upsert({
            where: {
              platform_username: {
                platform: profile.platform,
                username: profile.username
              }
            },
            create: {
              ...profile,
              createdAt: new Date()
            },
            update: {
              displayName: profile.displayName,
              profilePic: profile.profilePic,
              profileBio: profile.profileBio,
              followers: profile.followers,
              following: profile.following,
              public: profile.public,
              updatedAt: profile.updatedAt
            }
          })
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profile.username}:`, error)
        }
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`)
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç—ã –≤ –ë–î (–∞–Ω–∞–ª–æ–≥ Python upsert_posts)
   */
  private static async upsertPosts(
    items: InstagramPostData[], 
    searchType: string,
    hashtag?: string
  ): Promise<void> {
    console.log(`üìù –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${items.length} –ø–æ—Å—Ç–æ–≤ –≤ –ë–î`)
    const chunks = chunked(items, 100)
    
    for (const chunk of chunks) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é —á–∞–Ω–∫ –∏–∑ ${chunk.length} –ø–æ—Å—Ç–æ–≤`)
      
      const postsData = chunk.map(post => {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç ID: ${post.id}, username: ${post.username || post.ownerUsername}, type: ${post.type}, videoPlayCount: ${post.videoPlayCount || 0}`)
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
        let takenAt: Date | null = null
        if (post.timestamp) {
          if (typeof post.timestamp === 'number') {
            takenAt = new Date(post.timestamp * 1000)
          } else if (typeof post.timestamp === 'string') {
            takenAt = new Date(post.timestamp.replace('Z', '+00:00'))
          }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        let durationSec: number | null = null
        if (post.videoDuration) {
          durationSec = post.videoDuration
        } else if (post.duration) {
          durationSec = convertDurationToSeconds(post.duration)
        }

        console.log(`üìè –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: ${durationSec} —Å–µ–∫ (–∏–∑: videoDuration=${post.videoDuration}, duration="${post.duration}")`)

        return {
          id: post.id,
          platform: 'instagram',
          searchType: searchType,
          username: post.username || post.ownerUsername || '',
          hashtag: hashtag || null, // üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
          url: post.url || null,
          caption: post.caption || null,
          postType: post.type || 'Video',
          takenAt: takenAt,
          likes: BigInt(post.likesCount || 0),
          videoPlayCount: BigInt(post.videoPlayCount || 0),
          comments: BigInt(post.commentsCount || 0),
          durationSec: durationSec,
          raw: post as any,
          timestamp: takenAt,
          scrapedAt: new Date()
        }
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
      for (const post of postsData) {
        try {
          await prisma.posts.upsert({
            where: { id: post.id },
            create: post,
            update: {
              caption: post.caption,
              hashtag: post.hashtag, // üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥
              likes: post.likes,
              videoPlayCount: post.videoPlayCount,
              comments: post.comments,
              durationSec: post.durationSec,
              raw: post.raw,
              scrapedAt: post.scrapedAt
            }
          })
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç ${post.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${post.username} (${post.durationSec} —Å–µ–∫, ${post.videoPlayCount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)`)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ ${post.id}:`, error)
        }
      }
    }
    
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} –ø–æ—Å—Ç–æ–≤`)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–æ—Å—Ç–∞—Ö —Ö–µ—à—Ç–µ–≥–æ–≤, –Ω–æ –Ω–µ —Å–ø–∞—Ä—Å–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª–∏
   * –ê–Ω–∞–ª–æ–≥ Python get_not_public_profiles_instagram
   */
  static async getNotPublicProfiles(platform: string = 'instagram'): Promise<string[]> {
    try {
      const profiles = await prisma.posts.findMany({
        where: {
          platform: platform,
          searchType: 'hashtags',
          postType: 'Video',
          username: {
            not: ''
          }
        },
        select: {
          username: true
        },
        distinct: ['username']
      })

      const usernames = [...new Set(profiles.map(p => p.username).filter(Boolean))]
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usernames.length} –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤`)
      return usernames
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', error)
      return []
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ö–µ—à—Ç–µ–≥–∞—Ö)
   * –ê–Ω–∞–ª–æ–≥ Python parse_instagram_profiles —Å public=False
   */
  static async parseNotPublicProfiles(): Promise<void> {
    console.log('üîç –ò—â—É –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤')
    
    try {
      const usernames = await this.getNotPublicProfiles('instagram')
      
      if (usernames.length === 0) {
        console.log('üìù –ù–µ—Ç –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
        return
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usernames.length} –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`)
      
      const profileUrls = usernames.map(username => `https://www.instagram.com/${username}/`)
      await this.parseInstagramProfiles(profileUrls, false) // public=false
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', error)
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ö–µ—à—Ç–µ–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
   */
  static async parseHashtagOnSave(
    platform: string,
    hashtag: string
  ): Promise<void> {
    try {
      if (platform === 'instagram') {
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Instagram —Ö–µ—à—Ç–µ–≥–∞ #${hashtag} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ`)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        this.parseInstagramHashtags([hashtag]).then(async () => {
          // –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–∞ –ø–∞—Ä—Å–∏–º –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
          console.log(`üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`)
          await this.parseNotPublicProfiles()
        }).catch(error => {
          console.error(`‚ùå –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Instagram —Ö–µ—à—Ç–µ–≥–∞ #${hashtag} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, error)
        })
        
      } else if (platform === 'youtub') {
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ YouTube —Ö–µ—à—Ç–µ–≥–∞ #${hashtag} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ`)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ YouTube —Ö–µ—à—Ç–µ–≥–∞ –≤ —Ñ–æ–Ω–µ
        this.parseYoutubeHashtags([hashtag]).catch(error => {
          console.error(`‚ùå –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ YouTube —Ö–µ—à—Ç–µ–≥–∞ #${hashtag} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, error)
        })
        
      } else {
        console.log(`‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–∞:`, error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
   */
  static async parseProfileOnSave(
    platform: string,
    username: string, 
    isPublic: boolean = true
  ): Promise<void> {
    try {
      if (platform === 'instagram') {
        const profileUrl = `https://www.instagram.com/${username}/`
        
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Instagram –ø—Ä–æ—Ñ–∏–ª—è ${username} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ`)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        this.parseInstagramProfiles([profileUrl], isPublic).catch(error => {
          console.error(`‚ùå –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Instagram –ø—Ä–æ—Ñ–∏–ª—è ${username} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, error)
        })
        
      } else if (platform === 'youtub') {
        const channelUrl = `https://www.youtube.com/@${username}`
        
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ YouTube –∫–∞–Ω–∞–ª–∞ ${username} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ`)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ YouTube –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ–Ω–µ
        this.parseYoutubeChannels([channelUrl], isPublic).catch(error => {
          console.error(`‚ùå –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ YouTube –∫–∞–Ω–∞–ª–∞ ${username} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, error)
        })
        
      } else {
        console.log(`‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç Instagram —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ Apify –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
   * –ê–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏ parse_instagram_hashtags
   */
  static async parseInstagramHashtags(hashtags: string[]): Promise<void> {
    if (hashtags.length === 0) {
      console.log('üîç –ù–µ—Ç —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
      return
    }

    console.log(`üè∑Ô∏è –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${hashtags.length} Instagram —Ö–µ—à—Ç–µ–≥–æ–≤`)
    console.log(`üìã –•–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:`, hashtags)

    try {
      // 1. –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤
      const allHashtagDetails: any[] = []
      const chunks = chunked(hashtags, this.BATCH_SIZE)

      console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${this.BATCH_SIZE} —Ö–µ—à—Ç–µ–≥–æ–≤`)

      for (const chunk of chunks) {
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ —Ö–µ—à—Ç–µ–≥–æ–≤:`, chunk)
        
        try {
          // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –¥–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤
          for (const hashtag of chunk) {
            try {
              console.log(`üîç –ü–∞—Ä—Å—é –¥–µ—Ç–∞–ª–∏ —Ö–µ—à—Ç–µ–≥–∞: #${hashtag}`)
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
              const hashtagPosts = await apifyService.parseInstagramHashtag(hashtag, 150)
              
              // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–µ—Ç–∞–ª–µ–π —Ö–µ—à—Ç–µ–≥–∞
              const hashtagDetails = {
                id: `hashtag_${hashtag}`,
                name: hashtag, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                firstSeen: new Date().toISOString(),
                postsCount: hashtagPosts.length,
                raw: { originalName: hashtag, posts: hashtagPosts.length }
              }
              
              allHashtagDetails.push(hashtagDetails)
              console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ —Ö–µ—à—Ç–µ–≥–∞: #${hashtag} (${hashtagDetails.postsCount} –ø–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ)`)
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–µ—Ç–∞–ª–µ–π —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}:`, error)
              
              // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
              const errorMessage = error instanceof Error ? error.message : String(error)
              const hashtagDetails = {
                id: `hashtag_${hashtag}`,
                name: hashtag,
                firstSeen: new Date().toISOString(),
                postsCount: 0,
                raw: { originalName: hashtag, error: errorMessage }
              }
              allHashtagDetails.push(hashtagDetails)
              continue
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞–Ω–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤:`, error)
          continue
        }
      }

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –ë–î
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${allHashtagDetails.length} —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –ë–î`)
      await this.upsertHashtags(allHashtagDetails)

      // 3. –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ—à—Ç–µ–≥–∞–º
      console.log(`üì∏ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤`)
              await this.parseHashtagPosts(hashtags)

      console.log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ —Ö–µ—à—Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ö–µ—à—Ç–µ–≥–æ–≤:`, error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã —Ö–µ—à—Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ ApifyService
   */
  private static async parseHashtagPosts(hashtags: string[]): Promise<void> {
    console.log(`üì∏ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${hashtags.length} —Ö–µ—à—Ç–µ–≥–æ–≤`)
    const chunks = chunked(hashtags, this.BATCH_SIZE)

    console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤ —Ö–µ—à—Ç–µ–≥–æ–≤`)

    for (const chunk of chunks) {
      console.log(`üè∑Ô∏è –ü–∞—Ä—Å—é –ø–æ—Å—Ç—ã –¥–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤:`, chunk)
      
      try {
        // –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ö–µ—à—Ç–µ–≥—É —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–µ—à—Ç–µ–≥—É
        for (const hashtag of chunk) {
          try {
            console.log(`üöÄ –í—ã–∑—ã–≤–∞—é apifyService.parseInstagramHashtag –¥–ª—è #${hashtag} —Å –ª–∏–º–∏—Ç–æ–º ${this.POSTS_LIMIT}`)
            const posts = await apifyService.parseInstagramHashtag(hashtag, this.POSTS_LIMIT)
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`)
            
            if (posts.length > 0) {
              console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è #${hashtag}:`)
              posts.slice(0, 3).forEach((post: any, index: number) => {
                console.log(`  ${index + 1}. ID: ${post.id}, type: ${post.type}, username: ${post.username || post.ownerUsername}`)
              })
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∏ –±–µ—Ä–µ–º –∏—Ö URLs
            const videoPosts = posts.filter((post: any) => post.type === 'Video')
            const videoUrls = videoPosts.map((post: any) => post.url).filter(Boolean)
            
            console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${videoPosts.length} –≤–∏–¥–µ–æ-–ø–æ—Å—Ç–æ–≤ –∏–∑ ${posts.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è #${hashtag}`)
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ (–≤–∫–ª—é—á–∞—è videoPlayCount)
            if (videoUrls.length > 0) {
              console.log(`üîç –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è ${videoUrls.length} –≤–∏–¥–µ–æ-–ø–æ—Å—Ç–æ–≤`)
              
              try {
                const detailedPosts = await apifyService.parseInstagramProfilePosts(videoUrls, this.POSTS_LIMIT)
                
                console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${detailedPosts.length} –ø–æ—Å—Ç–æ–≤`)
                if (detailedPosts.length > 0) {
                  console.log(`üé¨ –ü—Ä–∏–º–µ—Ä—ã —Å videoPlayCount:`)
                  detailedPosts.slice(0, 3).forEach((post: any, index: number) => {
                    console.log(`  ${index + 1}. ID: ${post.id}, videoPlayCount: ${post.videoPlayCount || 0}`)
                  })
                }
                
                // üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${detailedPosts.length} Instagram –≤–∏–¥–µ–æ –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`)
                await this.upsertPosts(detailedPosts as InstagramPostData[], 'hashtags', hashtag)
                
              } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ #${hashtag}:`, error)
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${videoPosts.length} Instagram –≤–∏–¥–µ–æ (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ) –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`)
                await this.upsertPosts(videoPosts as InstagramPostData[], 'hashtags', hashtag)
              }
            }
            
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–æ–≤ —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}:`, error)
            continue
          }
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —á–∞–Ω–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤:`, error)
        continue
      }
    }

    console.log(`üéØ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ —Ö–µ—à—Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω`)
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à—Ç–µ–≥–∏ –≤ –ë–î (–∞–Ω–∞–ª–æ–≥ Python upsert_hashtags)
   */
  private static async upsertHashtags(items: any[]): Promise<void> {
    console.log(`üìù –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${items.length} —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –ë–î`)
    
    for (const hashtag of items) {
      try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ö–µ—à—Ç–µ–≥–∞ (–∞–Ω–∞–ª–æ–≥ Python unquote)
        const decodedName = decodeUrlString(hashtag.name)
        console.log(`üîç –î–µ–∫–æ–¥–∏—Ä—É—é —Ö–µ—à—Ç–µ–≥: "${hashtag.name}" ‚Üí "${decodedName}"`)
        
        await prisma.hashtag.upsert({
          where: {
            platform_tag: {
              platform: 'instagram',
              tag: decodedName
            }
          },
          create: {
            platform: 'instagram',
            tag: decodedName,
            firstSeen: new Date(hashtag.firstSeen),
            totalPosts: hashtag.postsCount || 0,
            createdAt: new Date(),
            updatedAt: new Date()
          },
          update: {
            totalPosts: hashtag.postsCount || 0,
            updatedAt: new Date()
          }
        })
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ö–µ—à—Ç–µ–≥: #${decodedName} (${hashtag.postsCount} –ø–æ—Å—Ç–æ–≤)`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ #${hashtag.name}:`, error)
      }
    }
    
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} —Ö–µ—à—Ç–µ–≥–æ–≤`)
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ –ë–î
   * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ —Ö–µ—à—Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
   */
  static async fixEncodedHashtags(): Promise<void> {
    console.log('üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –ë–î')
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–∏–º–≤–æ–ª %)
      const encodedHashtags = await prisma.hashtag.findMany({
        where: {
          platform: 'instagram',
          tag: {
            contains: '%'
          }
        }
      })

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${encodedHashtags.length} URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤`)

      for (const hashtag of encodedHashtags) {
        try {
          const decodedTag = decodeUrlString(hashtag.tag)
          
          if (decodedTag !== hashtag.tag) {
            console.log(`üîç –ò—Å–ø—Ä–∞–≤–ª—è—é —Ö–µ—à—Ç–µ–≥: "${hashtag.tag}" ‚Üí "${decodedTag}"`)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            const existingDecoded = await prisma.hashtag.findUnique({
              where: {
                platform_tag: {
                  platform: 'instagram',
                  tag: decodedTag
                }
              }
            })

            if (existingDecoded) {
              // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é
              console.log(`‚ö†Ô∏è –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é`)
              await prisma.hashtag.delete({
                where: {
                  id: hashtag.id
                }
              })
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
              await prisma.hashtag.update({
                where: {
                  id: hashtag.id
                },
                data: {
                  tag: decodedTag,
                  updatedAt: new Date()
                }
              })
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ö–µ—à—Ç–µ–≥: #${decodedTag}`)
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtag.tag}:`, error)
        }
      }

      console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${encodedHashtags.length} —Ö–µ—à—Ç–µ–≥–æ–≤`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤:', error)
    }
  }

  // =================== YouTube –ú–ï–¢–û–î–´ ===================

  /**
   * –ü–∞—Ä—Å–∏—Ç YouTube –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ Apify –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
   * –ê–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏ parse_youtube_profiles
   */
  static async parseYoutubeChannels(
    channelUrls: string[], 
    isPublic: boolean = true
  ): Promise<void> {
    if (channelUrls.length === 0) {
      console.log('üîç –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
      return
    }

    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${channelUrls.length} YouTube –∫–∞–Ω–∞–ª–æ–≤ (public: ${isPublic})`)
    console.log(`üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:`, channelUrls)

    try {
      const allChannelItems: YoutubeChannelData[] = []
      const allPosts: YoutubeVideoData[] = []
      const chunks = chunked(channelUrls, this.BATCH_SIZE)

      console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${this.BATCH_SIZE} –∫–∞–Ω–∞–ª–æ–≤`)

      for (const chunk of chunks) {
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ –∏–∑ ${chunk.length} –∫–∞–Ω–∞–ª–æ–≤:`, chunk)
        
        try {
          // –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
          for (const channelUrl of chunk) {
            try {
              console.log(`üîç –ü–∞—Ä—Å—é –∫–∞–Ω–∞–ª: ${channelUrl}`)
              const channelData = await apifyService.parseYoutubeChannel(channelUrl)
              
              if (channelData && channelData.length > 0) {
                const channelInfo = channelData[0]
                
                // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                const channel: YoutubeChannelData = {
                  channelUsername: channelInfo.channelUsername,
                  channelName: channelInfo.channelName,
                  channelUrl: channelInfo.channelUrl,
                  channelId: channelInfo.channelId,
                  numberOfSubscribers: channelInfo.numberOfSubscribers,
                  channelTotalVideos: channelInfo.channelTotalVideos,
                  channelTotalViews: channelInfo.channelTotalViews,
                  isChannelVerified: channelInfo.isChannelVerified,
                  channelDescription: channelInfo.channelDescription,
                  channelAvatarUrl: channelInfo.channelAvatarUrl
                }
                
                allChannelItems.push(channel)
                
                // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                const channelPosts: YoutubeVideoData[] = []
                channelData.forEach((video: any) => {
                  const post: YoutubeVideoData = {
                    id: String(video.id || ''),
                    title: typeof video.title === 'string' ? video.title : undefined,
                    url: typeof video.url === 'string' ? video.url : undefined,
                    viewCount: typeof video.viewCount === 'number' ? video.viewCount : undefined,
                    likes: typeof video.likes === 'number' ? video.likes : undefined,
                    commentsCount: typeof video.commentsCount === 'number' ? video.commentsCount : undefined,
                    date: typeof video.date === 'string' ? video.date : undefined,
                    duration: typeof video.duration === 'string' ? video.duration : undefined,
                    channelUsername: typeof video.channelUsername === 'string' ? video.channelUsername : undefined,
                    channelName: typeof video.channelName === 'string' ? video.channelName : undefined,
                    channelId: typeof video.channelId === 'string' ? video.channelId : undefined,
                    text: typeof video.text === 'string' ? video.text : undefined
                  }
                  channelPosts.push(post)
                })
                
                // üéØ –§–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û YouTube Shorts –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–æ–≤
                const filteredShorts = prioritizeYouTubeShorts(channelPosts)
                allPosts.push(...filteredShorts)
                
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–∞–Ω–∞–ª: ${channel.channelName} (${channel.numberOfSubscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, ${channelData.length} –≤–∏–¥–µ–æ)`)
                console.log(`üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredShorts.length} –¢–û–õ–¨–ö–û Shorts –∏–∑ ${channelData.length} –≤–∏–¥–µ–æ`)
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ ${channelUrl}:`, error)
              continue
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞–Ω–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:`, error)
          continue
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã –≤ –ë–î
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${allChannelItems.length} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î`)
      await this.upsertYoutubeProfiles(allChannelItems, isPublic)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
      if (allPosts.length > 0) {
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${allPosts.length} YouTube –≤–∏–¥–µ–æ –≤ –ë–î`)
        await this.upsertYoutubePosts(allPosts, 'profiles')
      }

      console.log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ YouTube –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ YouTube –∫–∞–Ω–∞–ª–æ–≤:`, error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç YouTube —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ Apify –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
   * –ê–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏ parse_youtube_hashtags
   */
  static async parseYoutubeHashtags(hashtags: string[]): Promise<void> {
    if (hashtags.length === 0) {
      console.log('üîç –ù–µ—Ç —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
      return
    }

    console.log(`üè∑Ô∏è –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${hashtags.length} YouTube —Ö–µ—à—Ç–µ–≥–æ–≤`)
    console.log(`üìã –•–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:`, hashtags)

    try {
      const allHashtagDetails: any[] = []
      const channelsMap = new Map<string, YoutubeChannelData>()
      
      const chunks = chunked(hashtags, this.BATCH_SIZE)

      console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${this.BATCH_SIZE} —Ö–µ—à—Ç–µ–≥–æ–≤`)

      for (const chunk of chunks) {
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞–Ω–∫ —Ö–µ—à—Ç–µ–≥–æ–≤:`, chunk)
        
        try {
          for (const hashtag of chunk) {
            try {
              console.log(`üîç –ü–∞—Ä—Å—é —Ö–µ—à—Ç–µ–≥: #${hashtag}`)
              const hashtagVideos = await apifyService.parseYoutubeHashtag(hashtag, this.POSTS_LIMIT) as any[]
              
              // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–µ—Ç–∞–ª–µ–π —Ö–µ—à—Ç–µ–≥–∞
              const hashtagDetails = {
                id: `hashtag_${hashtag}`,
                name: hashtag,
                firstSeen: new Date().toISOString(),
                postsCount: hashtagVideos.length,
                raw: { originalName: hashtag, posts: hashtagVideos.length }
              }
              
              allHashtagDetails.push(hashtagDetails)
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–µ—à—Ç–µ–≥—É
              const hashtagPosts: YoutubeVideoData[] = []
              hashtagVideos.forEach((video: any) => {
                // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                if (video.channelUsername) {
                  const channel: YoutubeChannelData = {
                    channelUsername: typeof video.channelUsername === 'string' ? video.channelUsername : undefined,
                    channelName: typeof video.channelName === 'string' ? video.channelName : undefined,
                    channelUrl: typeof video.channelUrl === 'string' ? video.channelUrl : undefined,
                    channelId: typeof video.channelId === 'string' ? video.channelId : undefined,
                    numberOfSubscribers: typeof video.numberOfSubscribers === 'number' ? video.numberOfSubscribers : undefined,
                    channelTotalVideos: typeof video.channelTotalVideos === 'number' ? video.channelTotalVideos : undefined,
                    channelTotalViews: typeof video.channelTotalViews === 'number' ? video.channelTotalViews : undefined,
                    isChannelVerified: typeof video.isChannelVerified === 'boolean' ? video.isChannelVerified : undefined,
                    channelDescription: typeof video.channelDescription === 'string' ? video.channelDescription : undefined,
                    channelAvatarUrl: typeof video.channelAvatarUrl === 'string' ? video.channelAvatarUrl : undefined
                  }
                  channelsMap.set(video.channelUsername, channel)
                }
                
                // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ö–µ—à—Ç–µ–≥—É
                const post: YoutubeVideoData = {
                  id: String(video.id || ''),
                  title: typeof video.title === 'string' ? video.title : undefined,
                  url: typeof video.url === 'string' ? video.url : undefined,
                  viewCount: typeof video.viewCount === 'number' ? video.viewCount : undefined,
                  likes: typeof video.likes === 'number' ? video.likes : undefined,
                  commentsCount: typeof video.commentsCount === 'number' ? video.commentsCount : undefined,
                  date: typeof video.date === 'string' ? video.date : undefined,
                  duration: typeof video.duration === 'string' ? video.duration : undefined,
                  channelUsername: typeof video.channelUsername === 'string' ? video.channelUsername : undefined,
                  channelName: typeof video.channelName === 'string' ? video.channelName : undefined,
                  channelId: typeof video.channelId === 'string' ? video.channelId : undefined,
                  text: typeof video.text === 'string' ? video.text : undefined
                }
                hashtagPosts.push(post)
              })
              
              // üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
              if (hashtagPosts.length > 0) {
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${hashtagPosts.length} YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`)
                await this.upsertYoutubePosts(hashtagPosts, 'hashtags', hashtag)
              }
              
              console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∞: #${hashtag} (${hashtagDetails.postsCount} –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ)`)
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}:`, error)
              continue
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞–Ω–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤:`, error)
          continue
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –ë–î
      if (allHashtagDetails.length > 0) {
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${allHashtagDetails.length} YouTube —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –ë–î`)
        await this.upsertYoutubeHashtags(allHashtagDetails)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã (–∫–∞–∫ –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏)
      const uniqueChannels = Array.from(channelsMap.values())
      if (uniqueChannels.length > 0) {
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${uniqueChannels.length} YouTube –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∫ –Ω–µ–¥–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏`)
        await this.upsertYoutubeProfiles(uniqueChannels, false)
      }

      console.log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ YouTube —Ö–µ—à—Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ YouTube —Ö–µ—à—Ç–µ–≥–æ–≤:`, error)
      throw error
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç YouTube –∫–∞–Ω–∞–ª—ã –≤ –ë–î –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª–∏
   */
  private static async upsertYoutubeProfiles(
    items: YoutubeChannelData[], 
    isPublic: boolean
  ): Promise<void> {
    const chunks = chunked(items, 100)
    
    for (const chunk of chunks) {
      const profileData = chunk.map(channel => {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π username (–∞–Ω–∞–ª–æ–≥ Python unquote)
        const decodedUsername = decodeUrlString(channel.channelUsername || '')
        console.log(`üîç –î–µ–∫–æ–¥–∏—Ä—É—é YouTube username: "${channel.channelUsername}" ‚Üí "${decodedUsername}"`)
        
        return {
          platform: 'youtub',
          username: decodedUsername,
          displayName: channel.channelName || null,
          profilePic: channel.channelAvatarUrl || null,
          profileBio: channel.channelDescription || null,
          followers: channel.numberOfSubscribers || 0,
          following: 0, // YouTube –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
          latestVideo: null,
          comments: 0,
          public: isPublic,
          updatedAt: new Date()
        }
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Prisma –¥–ª—è batch upsert
      for (const profile of profileData) {
        try {
          await prisma.profiles.upsert({
            where: {
              platform_username: {
                platform: profile.platform,
                username: profile.username
              }
            },
            create: {
              ...profile,
              createdAt: new Date()
            },
            update: {
              displayName: profile.displayName,
              profilePic: profile.profilePic,
              profileBio: profile.profileBio,
              followers: profile.followers,
              public: profile.public,
              updatedAt: profile.updatedAt
            }
          })
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ YouTube –∫–∞–Ω–∞–ª–∞ ${profile.username}:`, error)
        }
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} YouTube –∫–∞–Ω–∞–ª–æ–≤`)
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç YouTube –≤–∏–¥–µ–æ –≤ –ë–î –∫–∞–∫ –ø–æ—Å—Ç—ã
   */
  private static async upsertYoutubePosts(
    items: YoutubeVideoData[], 
    searchType: string,
    hashtag?: string
  ): Promise<void> {
    console.log(`üìù –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${items.length} YouTube –≤–∏–¥–µ–æ –≤ –ë–î`)
    const chunks = chunked(items, 100)
    
    for (const chunk of chunks) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é —á–∞–Ω–∫ –∏–∑ ${chunk.length} –≤–∏–¥–µ–æ`)
      
      const postsData = chunk.map(video => {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ ID: ${video.id}, –∫–∞–Ω–∞–ª: ${video.channelUsername}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${video.viewCount || 0}`)
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
        let takenAt: Date | null = null
        if (video.date) {
          takenAt = new Date(video.date)
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        let durationSec: number | null = null
        if (video.duration) {
          durationSec = convertDurationToSeconds(video.duration)
        }

        const isShorts = isYouTubeShorts(video)
        console.log(`üìè –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: ${durationSec} —Å–µ–∫ (–∏–∑: "${video.duration}") üéØ SHORTS ONLY`)

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π username –∫–∞–Ω–∞–ª–∞
        const decodedUsername = decodeUrlString(video.channelUsername || '')
        if (video.channelUsername && video.channelUsername !== decodedUsername) {
          console.log(`üîç –î–µ–∫–æ–¥–∏—Ä—É—é YouTube username –≤ –ø–æ—Å—Ç–µ: "${video.channelUsername}" ‚Üí "${decodedUsername}"`)
        }

        return {
          id: video.id,
          platform: 'youtub',
          searchType: searchType,
          username: decodedUsername,
          hashtag: hashtag || null, // üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
          url: video.url || null,
          caption: video.title || null,
          postType: 'Video',
          takenAt: takenAt,
          likes: BigInt(video.likes || 0),
          videoPlayCount: BigInt(video.viewCount || 0),
          comments: BigInt(video.commentsCount || 0),
          durationSec: durationSec,
          raw: video as any,
          timestamp: takenAt,
          scrapedAt: new Date()
        }
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
      for (const post of postsData) {
        try {
          await prisma.posts.upsert({
            where: { id: post.id },
            create: post,
            update: {
              caption: post.caption,
              hashtag: post.hashtag, // üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥
              likes: post.likes,
              videoPlayCount: post.videoPlayCount,
              comments: post.comments,
              durationSec: post.durationSec,
              raw: post.raw,
              scrapedAt: post.scrapedAt
            }
          })
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ YouTube –≤–∏–¥–µ–æ ${post.id} –∫–∞–Ω–∞–ª–∞ ${post.username} (${post.durationSec} —Å–µ–∫, ${post.videoPlayCount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)`)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ YouTube –≤–∏–¥–µ–æ ${post.id}:`, error)
        }
      }
    }
    
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} YouTube –≤–∏–¥–µ–æ`)
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç YouTube —Ö–µ—à—Ç–µ–≥–∏ –≤ –ë–î
   */
  private static async upsertYoutubeHashtags(items: any[]): Promise<void> {
    console.log(`üìù –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${items.length} YouTube —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –ë–î`)
    
    for (const hashtag of items) {
      try {
        await prisma.hashtag.upsert({
          where: {
            platform_tag: {
              platform: 'youtub',
              tag: hashtag.name
            }
          },
          create: {
            platform: 'youtub',
            tag: hashtag.name,
            firstSeen: new Date(hashtag.firstSeen),
            totalPosts: hashtag.postsCount || 0,
            createdAt: new Date(),
            updatedAt: new Date()
          },
          update: {
            totalPosts: hashtag.postsCount || 0,
            updatedAt: new Date()
          }
        })
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω YouTube —Ö–µ—à—Ç–µ–≥: #${hashtag.name} (${hashtag.postsCount} –≤–∏–¥–µ–æ)`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ YouTube —Ö–µ—à—Ç–µ–≥–∞ #${hashtag.name}:`, error)
      }
    }
    
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ ${items.length} YouTube —Ö–µ—à—Ç–µ–≥–æ–≤`)
  }
} 